; .\lcd.SRC generated from: lcd.c
; COMPILER INVOKED BY:
;        C:\Keil_v5\C51\BIN\C51.EXE lcd.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\lcd.lst) TABS(2) SRC(.\lcd.SRC)

$NOMOD51

NAME	LCD

P0	DATA	080H
P1	DATA	090H
P2	DATA	0A0H
P3	DATA	0B0H
MQ05	BIT	0B0H.5
T0	BIT	0B0H.4
AC	BIT	0D0H.6
T1	BIT	0B0H.5
EA	BIT	0A8H.7
LED_LCD	BIT	0B0H.7
ADC0804_RD	BIT	090H.4
ADC0804_CS	BIT	090H.3
IE	DATA	0A8H
EN	BIT	090H.2
RD	BIT	0B0H.7
ES	BIT	0A8H.4
IP	DATA	0B8H
RI	BIT	098H.0
INT0	BIT	0B0H.2
CY	BIT	0D0H.7
TI	BIT	098H.1
INT1	BIT	0B0H.3
INT_LCD	BIT	0B0H.3
ADC0804_WR	BIT	090H.5
PS	BIT	0B8H.4
SP	DATA	081H
RS	BIT	090H.0
OV	BIT	0D0H.2
RW	BIT	090H.1
WR	BIT	0B0H.6
SBUF	DATA	099H
PCON	DATA	087H
SCON	DATA	098H
ADC0804_INTR	BIT	090H.6
TMOD	DATA	089H
TCON	DATA	088H
IE0	BIT	088H.1
IE1	BIT	088H.3
B	DATA	0F0H
DHT11	BIT	0B0H.4
ACC	DATA	0E0H
UART_RX	BIT	0B0H.0
ET0	BIT	0A8H.1
UART_TX	BIT	0B0H.1
ET1	BIT	0A8H.3
TF0	BIT	088H.5
TF1	BIT	088H.7
RB8	BIT	098H.2
TH0	DATA	08CH
EX0	BIT	0A8H.0
IT0	BIT	088H.0
TH1	DATA	08DH
TB8	BIT	098H.3
EX1	BIT	0A8H.2
IT1	BIT	088H.2
P	BIT	0D0H.0
SM0	BIT	098H.7
TL0	DATA	08AH
SM1	BIT	098H.6
TL1	DATA	08BH
SM2	BIT	098H.5
PT0	BIT	0B8H.1
PT1	BIT	0B8H.3
RS0	BIT	0D0H.3
TR0	BIT	088H.4
RS1	BIT	0D0H.4
TR1	BIT	088H.6
PX0	BIT	0B8H.0
LED_GP2Y	BIT	0B0H.6
PX1	BIT	0B8H.2
DPH	DATA	083H
DPL	DATA	082H
REN	BIT	098H.4
RXD	BIT	0B0H.0
TXD	BIT	0B0H.1
F0	BIT	0D0H.5
PSW	DATA	0D0H
?PR?_LCD_Command?LCD SEGMENT CODE 
?PR?_LCD_Char?LCD    SEGMENT CODE 
?PR?_LCD_String?LCD  SEGMENT CODE 
?DT?_LCD_String?LCD  SEGMENT DATA OVERLAYABLE 
?PR?_LCD_String_xy?LCD                   SEGMENT CODE 
?DT?_LCD_String_xy?LCD                   SEGMENT DATA OVERLAYABLE 
?PR?LCD_Init?LCD     SEGMENT CODE 
	EXTRN	CODE (_delay_ms)
	EXTRN	CODE (?C?CLDOPTR)
	PUBLIC	LCD_Init
	PUBLIC	_LCD_String_xy
	PUBLIC	_LCD_String
	PUBLIC	_LCD_Char
	PUBLIC	_LCD_Command

	RSEG  ?DT?_LCD_String_xy?LCD
?_LCD_String_xy?BYTE:
        row?344:   DS   1
	ORG  1
        pos?345:   DS   1
	ORG  2
        str?346:   DS   3

	RSEG  ?DT?_LCD_String?LCD
?_LCD_String?BYTE:
        str?242:   DS   3
	ORG  3
          i?243:   DS   2
; #include <reg51.h>
; #include "lcd.h"
; #include "port.h"
; #include "delay.h"
; 
; 
; void LCD_Command (unsigned char cmd) 

	RSEG  ?PR?_LCD_Command?LCD
_LCD_Command:
	USING	0
			; SOURCE LINE # 7
;---- Variable 'cmd?040' assigned to Register 'R7' ----
; {
			; SOURCE LINE # 8
; 	LCD_DATA = cmd;
			; SOURCE LINE # 9
	MOV  	P0,R7
; 	RS=0;		
			; SOURCE LINE # 10
	CLR  	RS
; 	RW=0;		
			; SOURCE LINE # 11
	CLR  	RW
; 	EN=1; 
			; SOURCE LINE # 12
	SETB 	EN
; 	delay_ms(1);
			; SOURCE LINE # 13
	MOV  	R7,#01H
	MOV  	R6,#00H
	LCALL	_delay_ms
; 	EN=0;
			; SOURCE LINE # 14
	CLR  	EN
; 	delay_ms(5);
			; SOURCE LINE # 15
	MOV  	R7,#05H
	MOV  	R6,#00H
	LJMP 	_delay_ms
; END OF _LCD_Command

; }
; 
; void LCD_Char (unsigned char char_data) 

	RSEG  ?PR?_LCD_Char?LCD
_LCD_Char:
	USING	0
			; SOURCE LINE # 18
;---- Variable 'char_data?141' assigned to Register 'R7' ----
; {
			; SOURCE LINE # 19
; 	LCD_DATA=char_data;
			; SOURCE LINE # 20
	MOV  	P0,R7
; 	RS=1;		
			; SOURCE LINE # 21
	SETB 	RS
; 	RW=0;	
			; SOURCE LINE # 22
	CLR  	RW
; 	EN=1;   				
			; SOURCE LINE # 23
	SETB 	EN
; 	delay_ms(1);
			; SOURCE LINE # 24
	MOV  	R7,#01H
	MOV  	R6,#00H
	LCALL	_delay_ms
; 	EN=0;
			; SOURCE LINE # 25
	CLR  	EN
; 	delay_ms(5);
			; SOURCE LINE # 26
	MOV  	R7,#05H
	MOV  	R6,#00H
	LJMP 	_delay_ms
; END OF _LCD_Char

; }
; 
; void LCD_String (unsigned char *str)

	RSEG  ?PR?_LCD_String?LCD
_LCD_String:
	USING	0
			; SOURCE LINE # 29
	MOV  	str?242,R3
	MOV  	str?242+01H,R2
	MOV  	str?242+02H,R1
; {
			; SOURCE LINE # 30
; 	int i;
; 	for(i=0;str[i]!=0;i++)
			; SOURCE LINE # 32
	CLR  	A
	MOV  	i?243,A
	MOV  	i?243+01H,A
?C0003:
	MOV  	R3,str?242
	MOV  	R2,str?242+01H
	MOV  	R1,str?242+02H
	MOV  	DPL,i?243+01H
	MOV  	DPH,i?243
	LCALL	?C?CLDOPTR
	MOV  	R7,A
	JZ   	?C0006
; 	{
			; SOURCE LINE # 33
; 		LCD_Char (str[i]);  
			; SOURCE LINE # 34
	LCALL	_LCD_Char
; 	}
			; SOURCE LINE # 35
	INC  	i?243+01H
	MOV  	A,i?243+01H
	JNZ  	?C0003
	INC  	i?243
?C0012:
	SJMP 	?C0003
; }
			; SOURCE LINE # 36
?C0006:
	RET  	
; END OF _LCD_String

; 
; void LCD_String_xy (char row, char pos, char *str) 

	RSEG  ?PR?_LCD_String_xy?LCD
_LCD_String_xy:
	USING	0
			; SOURCE LINE # 38
	MOV  	row?344,R7
	MOV  	pos?345,R5
	MOV  	str?346,R3
	MOV  	str?346+01H,R2
	MOV  	str?346+02H,R1
; {
			; SOURCE LINE # 39
; 	if (row == 0)
			; SOURCE LINE # 40
	MOV  	A,R7
	RLC  	A
	SUBB 	A,ACC
	ORL  	A,R7
	JNZ  	?C0007
; 	LCD_Command((pos & 0x0F)|0x80);
			; SOURCE LINE # 41
	MOV  	A,pos?345
	ANL  	A,#0FH
	ORL  	A,#080H
	SJMP 	?C0013
?C0007:
; 	else if (row == 1)
			; SOURCE LINE # 42
	MOV  	R7,row?344
	MOV  	A,R7
	RLC  	A
	SUBB 	A,ACC
	MOV  	R6,A
	MOV  	A,R7
	XRL  	A,#01H
	ORL  	A,R6
	JNZ  	?C0008
; 	LCD_Command((pos & 0x0F)|0xC0);
			; SOURCE LINE # 43
	MOV  	A,pos?345
	ANL  	A,#0FH
	ORL  	A,#0C0H
?C0013:
	MOV  	R7,A
	LCALL	_LCD_Command
?C0008:
; 	LCD_String(str);	
			; SOURCE LINE # 44
	MOV  	R3,str?346
	MOV  	R2,str?346+01H
	MOV  	R1,str?346+02H
	LJMP 	_LCD_String
; END OF _LCD_String_xy

; }
; 
; void LCD_Init ()	

	RSEG  ?PR?LCD_Init?LCD
LCD_Init:
	USING	0
			; SOURCE LINE # 47
; {	
			; SOURCE LINE # 48
; 	delay_ms(20);		
			; SOURCE LINE # 49
	MOV  	R7,#014H
	MOV  	R6,#00H
	LCALL	_delay_ms
; 	LCD_Command (0x38);	
			; SOURCE LINE # 50
	MOV  	R7,#038H
	LCALL	_LCD_Command
; 	LCD_Command (0x0C);
			; SOURCE LINE # 51
	MOV  	R7,#0CH
	LCALL	_LCD_Command
; 	LCD_Command (0x06);	
			; SOURCE LINE # 52
	MOV  	R7,#06H
	LCALL	_LCD_Command
; 	LCD_Command (0x01);	
			; SOURCE LINE # 53
	MOV  	R7,#01H
	LCALL	_LCD_Command
; 	LCD_Command (0x80);	
			; SOURCE LINE # 54
	MOV  	R7,#080H
	LJMP 	_LCD_Command
; END OF LCD_Init

	END
